<?php

//Payment and Email Fields in Event Registration forms need to have a constant position in the form because the ID changes
define('EVENT_PAYMENT_FIELD_ID', variable_get('EVENT_PAYMENT_FIELD_ID', '19'));
define('EVENT_EMAIL_FIELD_ID','12');
define('EVENT_CONFIRMED_FIELD_ID','27');
//define('MEMBERSHIP_TYPE_FIELD_ID','20');
//define('ADD_MEMBERSHIP_FIELD_ID','23');
define('EVENT_NUMBER_GUESTS_FIELD_ID', '16');
define('EVENT_TYPE_OF_GUEST','29');

module_load_include('inc', 'webform', 'webform.submissions');
require_once DRUPAL_ROOT.'/sites/all/modules/webform/includes/webform.submissions.inc';
require_once DRUPAL_ROOT.'/sites/all/modules/webform/includes/webform.report.inc';
require_once DRUPAL_ROOT.'/sites/all/modules/ubercart/uc_order/uc_order.api.php';


function aaap_events_menu(){

    $items['event/%/registration'] = array(
        'page callback' => '_render_event_webform',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'title' => 'Event Report'
    );
    $items['admin/event/%/report'] = array(
        'page callback' => '_render_event_report',
        'page arguments' => array(2),
        'access callback' => TRUE
    );
    $items['admin/event/%node/csv'] = array(
        'page callback' => 'export_submissions_to_csv',
        'page arguments' => array(2),
        'access callback' => TRUE
    );

    return $items;

}

function aaap_events_webform_submission_insert($node, $submission) {


    //dsm($submission);
    if(!empty($submission->data[EVENT_PAYMENT_FIELD_ID]) and $node->type == PRODUCT_EVENT_TYPE) {

        $is_active_member = _ap_is_active_member(true);
        $event_fee = _ap_get_final_price($node, $submission);
        $reg_fee = $is_active_member ? $node->field_member_registration_fee['und'][0]['value'] : $node->field_non_member_registration_fe['und'][0]['value'];

        $is_free_for_member = FALSE;
        $is_free_for_current_submission = FALSE;
        if(intval($node->field_member_registration_fee['und'][0]['value']) == 0){
            $is_free_for_member = TRUE;
        }

        if($is_active_member){
            if($event_fee == 0){
                $is_free_for_current_submission = TRUE;
            }
        }

        $additional_price = NULL;
        $additional_amount = NULL;
        if(!empty($submission->data[EVENT_NUMBER_GUESTS_FIELD_ID][0])){
            $additional_amount = $submission->data[EVENT_NUMBER_GUESTS_FIELD_ID][0];
        }

        if(SITE_NAME == 'AAAP') {

            if(!empty($submission->data[EVENT_TYPE_OF_GUEST][0])){
                //dsm($submission->data[EVENT_TYPE_OF_GUEST][0]);
                $additional_price = 00.00;
                if ($submission->data[EVENT_TYPE_OF_GUEST][0] == 'first_option') {
                    $additional_price = 220.00;
                } elseif($submission->data[EVENT_TYPE_OF_GUEST][0] == 'second_option') {
                    $additional_price = 400.00;
                }
            }

            //dsm($submission);
            //dsm($submission->data[EVENT_TYPE_OF_GUEST][0]);

        }
        elseif (SITE_NAME == 'AASA'){
            $additional_price = $node->field_fee_for_guests['und'][0]['value'];
        }


        //dsm($submission);
        //dsm($submission->data[12]['value'][0]);
        $order_status = 'pending';
        if($is_free_for_current_submission){
             $order_status = 'completed';
        }

        $order_id = insert_invoice(array(
            'uid'=> $submission->uid,
            'order_total' => $reg_fee,
            'item_id' => $submission->nid,
            'key_id' => $submission->sid,
            'order_status' => $order_status,
            'payment_method' => $submission->data[EVENT_PAYMENT_FIELD_ID][0],
            'primary_email' => $submission->data[12][0],
            'additional_price' => $additional_price,
            'additional_amount' => $additional_amount,
            'billing_first_name' => $submission->data[1][0],
            'billing_last_name' =>  $submission->data[2][0],
            'billing_company' => $submission->data[5][0],
            'billing_street1' => $submission->data[6][0],
            'billing_street2' => $submission->data[7][0],
            'billing_city' => $submission->data[8][0],
            'billing_zone' => $submission->data[9][0],
            'billing_postal_code' => $submission->data[10][0],
            'order_type' => 'event_registration'
        ));
        
        //-> Looking for discount code
        $order = new stdClass();
        $order->products = uc_cart_get_contents();
        $nid_to_remove = array();
        $discount_code = FALSE;
        $code = "";
        if(count($order->products)>0){
            foreach ($order->products as $delta => $product) {
                if($product->data["module"] == "uc_product"){
                     $discount_code = TRUE;
                     if($product->type == "discount_code"){
                        $nid_to_remove[] = $product->nid;
                    }
                }elseif($product->data["module"] == "uc_coupon"){
                    $code = $product->data["code"];
                }
            }
        }
        //-> End Looking for discount code 

        if($is_free_for_current_submission){
            // set_status_invoice($submission->sid, $submission->nid, 'completed');
            $submission = _confirm_submission_webform($submission->nid, $submission->sid, EVENT_CONFIRMED_FIELD_ID);
        }elseif ($submission->data[EVENT_PAYMENT_FIELD_ID][0] == 'credit_card') {

            //-> Empties a cart of its contents.
            if(!$discount_code){
                uc_cart_empty(uc_cart_get_id()); 
            }

            $node->sell_price = $event_fee;
            node_save($node);
            $data = array('atributes' => array('sid' => $submission->sid));
            //dsm($data);

            uc_cart_add_item($node->nid, $qty = 1, $data, $cid = NULL, $msg = TRUE, $check_redirect = TRUE, $rebuild = TRUE);

            if(count($nid_to_remove)>0){
                node_delete_multiple($nid_to_remove);
            }

            drupal_get_messages('status', $clear_queue = TRUE);
            drupal_goto('cart/checkout');
            
        } elseif ($submission->data[EVENT_PAYMENT_FIELD_ID][0] == 'mail_check') {

            $event_price = $event_fee;
            $vent_guest = _ap_get_guests_fee($submission, $node);
            $params = array();
            if($discount_code){
                //-> Add tmp node for the Cart.
                $payment_method = 'mail_check';
                $uid = $submission->uid;
                $nid = $submission->nid;
                $sid = $submission->sid;
                $field_key = "event_temporal_node";
                $temporal_node = new stdClass();
                $temporal_node->type = 'national_conference_add_ons';
                $temporal_node->status = 1;
                $temporal_node->uid = $uid;
                $temporal_node->qty = 1;
                $temporal_node->title = "Event temporal node.";
                $temporal_node->field_price['und'][0]['value'] = $event_price;
                $temporal_node->field_nid['und'][0]['nid'] = $nid;
                $temporal_node->field_sid['und'][0]['value'] = $sid;
                $temporal_node->field_payment_method['und'][0]['value'] = $payment_method;
                $temporal_node->field_key['und'][0]['value'] = $field_key;
                $temporal_node->price = $event_price;
                $temporal_node->sell_price = $event_price;
                node_save($temporal_node);
                $data = array('atributes' => array('sid' => $sid));
                uc_cart_add_item($temporal_node->nid, $qty = 1, $data, $cid = NULL, $msg = FALSE, $check_redirect = TRUE, $rebuild = TRUE);
                $line_items = array();
                //-> Creamos la orden para este producto.
                // Create the order and gather user information
                //$product = uc_product_load($temporal_node);
                $order = uc_order_new($uid, 'in_checkout');
                $order_id = $order->order_id;
                $_SESSION['cart_order'] = $order_id;
                $order->products = uc_cart_get_contents();
                unset($_SESSION['uc_cart_order_rebuild']);
                uc_order_save($order);
                $order = uc_order_load($order_id);
                $line_items = uc_order_load_line_items($order);
                foreach ($line_items as $delta => $line_item) {
                    if(isset($line_item["type"])){
                       if($line_item["type"] == "subtotal"){
                         //-> Subtotal
                         $params["to_add_subtotal"] = $line_item; 
                       } 
                       if($line_item["type"] == "coupon"){
                         //-> Coupon
                         $params["to_add_coupon"] = $line_item;
                       } 
                    }
                }
                
                // Eliminamos los nodos productos creados temporalmente.
                if(count($nid_to_remove)>0){
                    $nid_to_remove[] = $temporal_node->nid;
                    node_delete_multiple($nid_to_remove);
                }
                //-> End tmp node for the Cart.
                //Removes one (or all) coupon codes from the session.
                uc_coupon_session_clear($code = NULL);
                //Empties a cart of its contents.
                uc_cart_empty(uc_cart_get_id(FALSE));
            }
            
            global $base_url;
            //include(DRUPAL_ROOT . '/sites/all/modules/config/event_payment_instructions.php');
            global $base_root;

            $subject =  SITE_NAME . ' Meeting: New Registrant Notification';
            $message = 'A registrant has signed up for a ' . $node->title . '. Click here to see the registration information: <a href="'.$base_root.'/node/'.$node->nid.'/submission/'.$submission->sid.'">'.$base_root.'/node/'.$node->nid.'/submission/'.$submission->sid.'</a><br />'
                . $text_order_download_link_formatted
                .'Thank you,'. "<br />"
                .SITE_NAME;
            $email = new PHPMailer();
            $email->From      = SYSTEM_MAIL;
            $email->FromName  = SITE_NAME;
            $email->Subject   = $subject;
            $email->Body      = $message;
            $email->IsHTML(true);
            $email_to = explode(',',ADMIN_MAIL);
            // dsm($email_to);
            foreach($email_to as $value){
                $email->AddAddress($value,'');
            }
            $email->Send();


        }
    }
}



function aaap_events_webform_submission_presave($node, &$submission) {

    if(!empty($submission->sid)){
        $submission_after = webform_get_submissions(array('nid' => $submission->nid, 'sid' => $submission->sid));
        global $base_root;
        if(isset($submission->data[27][0]) && isset($submission->data[19][0])){
            if($submission_after[$submission->sid]->data[27][0] == 'not-confirmed' and $submission->data[27][0]=='confirmed'and $submission->data[19][0]== 'mail_check'){
                //die(var_dump($submission));
                //dsm($node);
                $event_price = _ap_get_final_price($node, $submission);
                $vent_guest = _ap_get_guests_fee($submission,$node);
                $reg_fee = _ap_is_active_member(true)?$node->field_member_registration_fee['und'][0]['value']:$node->field_non_member_registration_fe['und'][0]['value'];
                set_status_invoice($submission->sid,$submission->nid,'completed');

                global $base_root;
                $subject = SITE_NAME.' Event: Notification of Payment Received';

                $msg_someone = "<b>Renewing: </b>";
                if($submission->data[29][0] == "someone"){
                  $msg_someone .=  "I am registering for someone else.";
                  if(isset($submission->data[30][0])){
                       if(!empty($submission->data[30][0])){
                            $someone =  $submission->data[30][0];
                            $msg_someone .=  "<br /><b>Please specify (If someone else):</b> ";
                            $msg_someone .= $someone. "<br /><br />";
                       }    
                  }else{
                        $msg_someone .= "<br /><br />";
                  }
                }else{
                    $msg_someone .=  "I am registering for myself.". "<br /><br />";
                }

                $message = 'Thank you for registering for the '.SITE_NAME.' '.$node->title.'.'."<br />"
                    .'More information about the event here: <a href="'.$base_root.'/'.drupal_get_path_alias('node/'.$submission->nid). '">'.$node->title.'</a><br /><br /><br />'
                    .'Registration Receipt'. "<br />"
                    .'Payment Type: Check'. "<br /><br />"
                    .$node->title. "<br />"
                    .'Registration Fee $'.$reg_fee."<br />"
                    .'Guest $'.$vent_guest."<br />"
                    .'------------------------------------------------'. "<br />"
                    .'Event Registration'."<br />"
                    .'$'.$reg_fee."<br />"
                    .'Guest'."<br />"
                    .'$'.$vent_guest."<br />"
                    .'------------------------------------------------'. "<br />"
                    .'Grand Total'."<br />"
                    .'$'.$event_price. "<br /><br />"
                    .$msg_someone
                    .'Name: '.$submission->data[1][0]." ".$submission->data[2][0]. "<br />"
                    .'Organization: '.$submission->data[5][0]. "<br />"
                    .'Email: '.$submission->data[12][0]. "<br />"
                    .'Address Line 1: '.$submission->data[6][0]. "<br />"
                    .'Address Line 2: '.$submission->data[7][0]. "<br />"
                    .'City: '.$submission->data[8][0]. "<br />"
                    .'State/Province: '.$submission->data[9][0]. "<br />"
                    .'Zip/Postal Code: '.$submission->data[10][0]. "<br /><br />"
                    .'Thank you.'. "<br /><br />"
                    .SITE_NAME;

                $email = new PHPMailer();
                $email->From      = SYSTEM_MAIL;
                $email->FromName  = SITE_NAME;
                $email->Subject   = $subject;
                $email->Body      = $message;
                $email->IsHTML(true);
                $email->AddAddress($submission->data[12][0],'');
               $email->Send();
            }
        }
    }
}

/**
 * Implements hook_uc_payment_entered().
 */
function aaap_events_uc_payment_entered($order, $method, $amount, $account, $data, $comment){
    // Ensure order status is updated to complete after payment entered. 
    $do = FALSE;
    if(isset($order->products)){
        foreach ($order->products as $key => $product) {
            if(isset($product->nid)){
                $nid = $product->nid;
                $result = db_select('node', 'n')
                        ->fields('n', array('type'))
                        ->condition('nid', $nid,'=')
                        ->execute()
                        ->fetchAssoc();
                if(isset($result['type'])){
                    if($result['type'] == 'event'){
                        $do = TRUE;
                    }  
                }       
            }
        }
    }
    if($do){
        rules_invoke_event('uc_payment_entered', $order, $account);
    }
}

function aaap_events_uc_checkout_complete($order, $account){

    //dsm($order);
    //dsm($account);
    global $base_root, $base_url;
    $product_purchased = _aaap_product_purchased($order);

    //-> Change User Rol
    if(count($account->roles)==1){
        if(isset($account->roles[2])){
            //-> 2 => "authenticated user" 
            user_save($account, array('roles' => array( DRUPAL_AUTHENTICATED_RID => 'authenticated user', 10 => 'checkout anonymous user')));
        }
    }
    
    $products = array_values($order->products);
    $sid = $products[0]->data['atributes']['sid'];

    if($product_purchased->type == PRODUCT_EVENT_TYPE){

        //$success = _confirm_credit_card_event_registration($product_purchased->nid, $order->primary_email,EVENT_CONFIRMED_FIELD_ID,EVENT_EMAIL_FIELD_ID);
        $submission = _confirm_submission_webform($product_purchased->nid,$sid,EVENT_CONFIRMED_FIELD_ID);

        set_status_invoice($sid,$product_purchased->nid,'completed');

        
        $event_price = _ap_get_final_price($product_purchased, $submission);
        $event_guest = _ap_get_guests_fee($submission,$product_purchased);

        $reg_fee = _ap_is_active_member(true)?$product_purchased->field_member_registration_fee['und'][0]['value']:$product_purchased->field_non_member_registration_fe['und'][0]['value'];
        
        $msg_someone = "";
        $msg_someone .=  "Registering: ". "<br />";
        $member_first_name = $submission->data[1][0];
        $member_last_name = $submission->data[2][0];
        $msg_someone .=   "Event Member information: ".$member_first_name." ".$member_last_name. "<br />";
        $billing_first_name = $order->billing_first_name;
        $billing_last_name = $order->billing_last_name;
        $msg_someone .= "Billing information: ".$billing_first_name." ".$billing_last_name. "<br /> <br />";
        
        //-> Looking for discount code
        $nid_to_remove = array();
        $discount_code = FALSE;
        if(count($order->products)>0){
            foreach ($order->products as $delta => $product) {
                if($product->data["module"] == "uc_product"){
                     $discount_code = TRUE;
                     if($product->type == "discount_code"){
                        $nid_to_remove[] = $product->nid;
                    }
                }
            }
        }
        if($discount_code){
            $line_items = uc_order_load_line_items($order);
            foreach ($line_items as $delta => $line_item) {
                if(isset($line_item["type"])){
                   if($line_item["type"] == "subtotal"){
                     //-> Subtotal
                     $params["to_add_subtotal"] = $line_item; 
                   } 
                   if($line_item["type"] == "coupon"){
                     //-> Coupon
                     $params["to_add_coupon"] = $line_item;
                   } 
                }
            }  
            // Eliminamos los nodos productos creados temporalmente.
            if(count($nid_to_remove)>0){
                $nid_to_remove[] = $temporal_node->nid;
                node_delete_multiple($nid_to_remove);
            }
        }
        //-> End Looking for discount code 
        $sell_price = $event_price;
        $text_price = 'Grand Total' . "<br />" . '$' . $event_price . "<br /> <br />";
        $tmp_total = "";
        if (isset($params["to_add_subtotal"]["amount"]) && isset($params["to_add_coupon"]["amount"])) {
            $tmp_total = floatval($params["to_add_subtotal"]["amount"]) + floatval($params["to_add_coupon"]["amount"]);
            $sell_price = $tmp_total;
        }
        if (isset($params["to_add_coupon"])) {
            $text_price = '<b>'.$params["to_add_coupon"]["title"] . "</b><br />";
            $text_price .= '-$' . number_format(((float) $params["to_add_coupon"]["amount"]) * -1, 2, '.', '') . "<br />";
            if (!empty($tmp_total)) {
                $sell_price = $tmp_total;
                $text_price .= 'Total for this Order: ' . "<br />" . '$' . number_format((float) $tmp_total, 2, '.', '') . "<br /> <br />";
            }
        }
        
        $key_id = $sid;
        $item_id = $product_purchased->nid;
        $product = array();
        $product["title"] = $product_purchased->title;
        $product["field_payment_method"]['und'][0]['value'] = "credit_card";
        $product["sell_price"] = $sell_price;
        $order_summary->products = array($product);
        if (isset($params["to_add_subtotal"])) {
            $order_summary->subtotal = $params["to_add_subtotal"];
            $order_summary->coupon = $params["to_add_coupon"];
        }
        if (isset($params["to_add_coupon"])) {
            $order_summary->coupon = $params["to_add_coupon"];
        }
        db_update('aaap_check_invoices')->fields(array('order_total' => $sell_price, 'modified' => strtotime('now'), 'order_summary' => json_encode($order_summary)))->condition('key_id', $key_id, '=')->condition('item_id', $item_id, '=')->execute();
        $result = db_query('SELECT order_id '
                . 'FROM {aaap_check_invoices} '
                . 'WHERE key_id = :keyid '
                . 'AND item_id = :itemid '
                . 'ORDER BY order_id DESC '
                . 'LIMIT 1', array(':keyid' => $key_id, ':itemid' => $item_id));
        $all_result = $result->fetchAll();
        $text_order_download_link = "";
        if (isset($all_result[0])) {
            $order_tmp = $all_result[0];
            if (isset($order_tmp->order_id)) {
                $invoice_url = $base_url . '/invoice/' . $order_tmp->order_id . '/print';
                $text_order_download_link = "<a href='" . $invoice_url . "' target='_blank'>Click here to download your Receipt</a><br /><br />";
            }
        }

        $subject = SITE_NAME.' Event: Notification of Payment Received';
        $message = 'Thank you for registering for the '.SITE_NAME.' '.$product_purchased->title.'<br />'
            .'More information about the event here: <a href="'.$base_root.'/'.drupal_get_path_alias('node/'.$submission->nid). '">'.$product_purchased->title.'</a><br /><br /><br />'
            .'Registration Receipt'. "<br />"
            .'Payment Type: Credit card'. "<br />"
            .$product_purchased->title. "<br />"
            .'Registration Fee $'.$reg_fee."<br />"
            .'Guest $'.$event_guest."<br />"
            .'------------------------------------------------'. "<br />"
            .'Event Registration'."<br />"
            .'$'.$reg_fee."<br />"
            .'Guest'."<br />"
            .'$'.$event_guest."<br />"
            .'------------------------------------------------'. "<br />"
            . $text_price
            . $msg_someone
            .'Name: '.$submission->data[1][0]." ".$submission->data[2][0]. "<br />"
            .'Organization: '.$submission->data[5][0]. "<br />"
            .'Email: '.$submission->data[12][0]. "<br />"
            .'Address Line 1: '.$submission->data[6][0]. "<br />"
            .'Address Line 2: '.$submission->data[7][0]. "<br />"
            .'City: '.$submission->data[8][0]. "<br />"
            .'State/Province: '.$submission->data[9][0]. "<br />"
            .'Zip/Postal Code: '.$submission->data[10][0]. "<br /><br />"
            . $text_order_download_link
            .'Thank you,'. "<br /><br />"
            .SITE_NAME;

        $email = new PHPMailer();
        $email->From      = SYSTEM_MAIL;
        $email->FromName  = SITE_NAME;
        $email->Subject   = $subject;
        $email->Body      = $message;
        $email->IsHTML(true);
        $email->AddAddress($order->primary_email,'');

        $email->Send();

        $subject = SITE_NAME.' Meeting: New Registrant Notification';
        $message = 'A registrant has signed up for a '.$product_purchased->title.'. Click here to see the registration information: <a href="'.$base_root.'/node/'.$product_purchased->nid.'/submission/'.$submission->sid.'">'.$base_root.'/node/'.$product_purchased->nid.'/submission/'.$submission->sid.'</a><br /><br />'
            ."Payee: ".$order->billing_first_name." ".$order->billing_last_name."<br /><br />"
            . $msg_someone
            . $text_order_download_link
            .'Thank you,<br />'
            .SITE_NAME;
        $email = new PHPMailer();
        $email->From      = SYSTEM_MAIL;
        $email->FromName  = SITE_NAME;
        $email->Subject   = $subject;
        $email->Body      = $message;
        $email->IsHTML(true);
        $email_to = explode(',',ADMIN_MAIL);
        foreach($email_to as $value){
            $email->AddAddress($value,'');
        }

        $email->Send();
        
        //Removes one (or all) coupon codes from the session.
        uc_coupon_session_clear($code = NULL);
        //Empties a cart of its contents.
        uc_cart_empty(uc_cart_get_id(FALSE));
        //  +=====================================+
        //  | Redirect To THanks Page             |
        //  +=====================================+ s
        drupal_goto('thank-you-registering');


    }

}


function aaap_events_form_alter(&$form, &$form_state, $form_id){
    global $user;

    if(strpos($form_id, 'webform_client_form_')!==false){//for now this covers all webforms but should add a condition to test if it is an Event webform submission (against URL maybe)
        $event = aaap_current_node(); //TODO: REFACTOR... CHECK IF IT'S A VALID EVENT NODE

        if(!array_key_exists(ADMINISTRATOR, $user->roles) and !array_key_exists(SUPER, $user->roles)){
            //HIDE CONFIRMED FIELD TO NORMAL USERS
            $form['submitted']['confirmed']['#type'] = 'hidden';
        }

        //Remove 'N/A' option from fields with options (radio buttons)
        $form['submitted']['enter_pediatrics_used_to_prevent_spam']['#title'] = 'Enter <i>'.CAPTCHA.'</i> (used to prevent spam)' ;

        //Check if event is free for members or non-members and hides the payment field in that case
        $_guests_price = isset($event->field_fee_for_guests['und'][0]['value'])?intval($event->field_fee_for_guests['und'][0]['value']):0;

        $is_active_member = _ap_is_active_member(true);
        if(!empty($event->field_member_registration_fee)){
            $member_fee = $event->field_member_registration_fee['und'][0]['value'];

            if(isset($event) && $event->type == 'event' && $is_active_member && $member_fee === "0" && ($_guests_price == 0) ){
                $form['submitted']['payment_method']['#type'] = 'hidden';
                $form['submitted']['payment_method']['#required'] = '0';
            }
        }
        if(!empty($event->field_non_member_registration_fee)){
            $non_member_fee = $event->field_non_member_registration_fee['und'][0]['value'];
            if(isset($event) && $event->type == 'event' && user_is_anonymous() && $non_member_fee === "0" && ($_guests_price == 0) ){
                $form['submitted']['payment_method']['#type'] = 'hidden';
                $form['submitted']['payment_method']['#required'] = '0';
            }
        }
        //TODO: THIS SHOULD BE GONE SOON
        if(!array_key_exists(ACTIVE, $user->roles) && !array_key_exists(SUPER, $user->roles) && !array_key_exists(ADMINISTRATOR, $user->roles) ) {
            //$form['submitted']['add_aaap_membership_if_applicable']['#type'] = 'hidden'; //REMOVED FIELD FROM FORM
            $form['submitted']['select_membership_type']['#type'] = 'hidden';
        }

        if(empty($form['#submission']) and $form['#node']->type == 'event'){
            // dsm($form);
            array_unshift($form['#validate'] , 'event_exist');
        }
       


    }

    if($form_id == 'uc_cart_checkout_form'){
        //array_unshift($form['#validate'] , 'cancel_cart');

        $order_ = uc_order_load(intval($_SESSION['cart_order']));
        $product_purchased_ = _aaap_product_purchased($order_);


        if($product_purchased_->type == PRODUCT_EVENT_TYPE){
            //dsm($order);
            $products_ = array_values($order_->products);
            $sid_ = $products_[0]->data['atributes']['sid'];
            $submission_ = webform_get_submission($product_purchased_->nid,$sid_);

            $form['panes']['customer']['primary_email']['#value'] = $submission_->data[EVENT_EMAIL_FIELD_ID][0];
        }else{

            if(isset($user->mail)){
                $form['panes']['customer']['primary_email']['#value'] = $user->mail;
                //TODO: THIS SHOULD BE THE EMAIL FROM THE REG FORM INSTEAD
            }
      
        }
    }

    if ($form_id == 'event_node_form') {

        if(SITE_NAME == 'AASA'){
            //dsm($form);

            $form['field_show_on_landing_page']['#access'] = FALSE;

        }

        unset($form['field_is_open']['und']['#options']['_none']);

    }

    if (isset($form['#node']->type) && isset($form['submitted'])) {
        if ($form['#node']->type == "event") {

            $form['#attached']['js'][] = drupal_get_path('module', 'aaap_events') . '/js/aaap_events.js';

            $messages_status = '';
            $lock_form = FALSE;

            $require_login_to_register = $form['#node']->field_require_login_to_register["und"][0]["value"];
            $info = array(
                "require_login_to_register" =>  $require_login_to_register,
                "submitted" => $form['submitted']
            );

            if($require_login_to_register == "yes" ){
                if(!user_is_logged_in()){
                    $lock_form = TRUE;
                }
            }

            if ($lock_form) {
                //-> Lock the form.
                hide($form['actions']['submit']);
                $messages_status = '<div class="messages_status">Notice: You must be logged in to continue.</div>';
                $form['submitted']['prices']['#prefix'] = $messages_status;
                foreach($form['submitted'] as $key_item => $item){
                    if(isset($item['#type'])){
                        $form['submitted'][$key_item]['#attributes']['disabled'] = 'disabled';
                    }
                }
                //dpm($info);
            }

            //  +==============================================+
            //  | Hide Discount Codes                          |
            //  +==============================================+

            if (isset($form['#node']->field_hide_discount_codes['und'][0]['value'])) {
                $field_hide_discount_codes = $form['#node']->field_hide_discount_codes['und'][0]['value'];
                if ($field_hide_discount_codes == "1") {
                    hide($form['submitted']['discount_codes']);
                }
            }


        }
    }

}


function aaap_events_form_uc_cart_checkout_form_alter(&$form, &$form_state) {
    // if user cancel is checkout the cart is dropped
//    dsm('test');
//    dsm($_POST);
//    dsm($form);
    if(isset($_POST['custom'] )){
        if ($_POST['custom'] == t('Cancel') and $form['#node']->type == 'event') {
            global $base_url;
            global $user;
            // get the cart_id (you can do it with the  uc_cart_get_id function defined in uc_cart.module at line 1310
            if($user->uid) {
                $cart_id = $user->uid;
            }
            else {
                $cart_id = $_SESSION['uc_cart_id'];
            }
            // drop the cart
            db_query('DELETE FROM {uc_cart_products} WHERE cart_id = %d', $cart_id);
            // if order has been prepare, unset the variable
            if (intval($_SESSION['cart_order']) > 0) {
                uc_order_comment_save($_SESSION['cart_order'], 0, t('Customer cancelled this order from the checkout form.'));
                unset($_SESSION['cart_order']);
            }

            drupal_goto('education-events');

        }
    }
    // here we define new $form['continue']['#name'] and $form['cancel']['#name'] to override the condition define in the uc_cart_checkout_form (uc_cart.pages.inc line 125)
    // the $form['continue']['#name'] is defined too as all buttons in a form have to get the same id (FORM API)
    $form['continue']['#name'] = 'custom';
    $form['cancel']['#name'] = 'custom';
    $form['cancel']['#value'] = t('NewValue');
}


function event_exist($form, &$form_state) {

    $email = $form_state['values']['submitted']['email'];
    $event_submissions = webform_get_submissions($form_state['build_info']['args'][0]->nid);
    $user_submission = _get_user_submission($event_submissions,$email);
    //dsm($user_submission);

    if (!empty($user_submission)) {
        form_set_error('Email', 'You have already registered in this event.');
    }


}

function cancel_cart($form, &$form_state) {
   // dsm($form_state);
    //dsm($_POST);
    drupal_goto('education-events');

}


function _ap_get_guests_fee($submission, $event){
    $guests_number = $submission->data[EVENT_NUMBER_GUESTS_FIELD_ID][0];
    if(SITE_NAME == 'AASA') {

        $price = $event->field_fee_for_guests['und'][0]['value'];
        if (is_numeric($guests_number) && is_numeric($price))
            return $guests_number * $price;
        else
            return 0;
    }
    elseif(SITE_NAME == 'AAAP'){

        if(!empty($submission->data[EVENT_TYPE_OF_GUEST][0])){
            //dsm($submission->data[EVENT_TYPE_OF_GUEST][0]);
            if ($submission->data[EVENT_TYPE_OF_GUEST][0] == 'first_option') {
                return 220*$guests_number;
            } elseif($submission->data[EVENT_TYPE_OF_GUEST][0] == 'second_option') {
                return 400*$guests_number;
            }
        }
    }
}


function _ap_get_final_price($event, $submission){

    $price = 0;

    if(_ap_is_active_member(true)){
        $price = $event->field_member_registration_fee['und'][0]['value'];
    }else{
        $price = $event->field_non_member_registration_fe['und'][0]['value'];
    }

    //add guests fees to the final price
    $price += _ap_get_guests_fee($submission,$event);

    return $price;
}

function  _get_user_submission($submissions, $email){

    //dsm($email);
    // dsm($submissions);
    foreach($submissions as $sub){
        if($sub->data[EVENT_EMAIL_FIELD_ID][0]==$email and
            (($sub->data[EVENT_PAYMENT_FIELD_ID][0]=='mail_check')
                or
                ($sub->data[EVENT_PAYMENT_FIELD_ID][0]=='credit_card'
                    and $sub->data[EVENT_CONFIRMED_FIELD_ID][0]=='confirmed'))
        ){
            return $sub;
            //TODO: REFACTOR: Better return the last one that is also not confirmed (two conditions for uniqueness)
        }

    }

    return false;

}


function _get_last_submission($submissions){

    $size = sizeof($submissions);
//    dsm($submissions);

    if($size){
        $arr = array_values($submissions);
        return $arr[$size-1];
    }

    return false;
}
function _confirm_submission_webform($nid, $sid,$confirmed_field_id){
    $node = node_load($nid);
    $submission = webform_get_submission($nid,$sid);
    $submission->data[$confirmed_field_id][0] = "confirmed";
    webform_submission_update($node, $submission);
    return $submission;
}
/**
 * based on webform_results_download_form_submit in webform.report.inc ... webform 7.x-3.20
 */
function export_submissions_to_csv($node) {

    $submissions = webform_get_submissions($node->nid);

    if (isset($_GET['filter']) ) {//TODO: validate filter

        _do_filter_report($_GET['filter'], $submissions);
    }

    $options = array(
        'delimiter' => ',',
        'components' => array('time', '1','2','3','4','5','6','7','8','9','10','11','12','13', '21', '25', '14', '16', '29', '63', '15', '19','27'),
        'select_keys' => 0,
        'select_format' => 'separate',
        'range_type' => 'range',
        'download' => TRUE,
    );

    // Retrieve the list of required SIDs.
    $options['sids'] = _extract_sids($submissions);

    $export_info = webform_results_export($node, 'delimited', $options);
    //dsm($export_info);
    webform_results_download($node, $export_info);

}


function _extract_sids($submissions){
    $sids = array();

    foreach($submissions as $sub){
        $sids[] = $sub->sid;
    }

    return $sids;
}

function aaap_event_registration($nid)
{
    if (request_uri() == '/event/' . $nid . '/registration') {
        return true;
    } else {
        return false;
    }

}

/******** EVENT REPORT ********/



function _render_event_webform($nid)
{

    $node = node_load($nid);
    return node_view($node);
}


function _do_filter_report($filter, &$submissions)
{

    switch ($filter) {

        case 'members':
            foreach ($submissions as $sid => $submission) {

                if ($submission->uid == 0 or user_load($submission->uid) == NULL) {

                    unset($submissions[$sid]);
                }
                if ($submission->data[EVENT_CONFIRMED_FIELD_ID][0] == "not-confirmed") {
                    unset($submissions[$sid]);
                }
            }
            break;

        case 'non-members':
            foreach ($submissions as $sid => $submission) {
                //dsm(user_load($submission->uid));
                //dsm($submission->uid);
                if ($submission->uid != 0 and user_load($submission->uid) != NULL) {
                    unset($submissions[$sid]);
                }
                if ($submission->data[EVENT_CONFIRMED_FIELD_ID][0] == "not-confirmed") {
                    unset($submissions[$sid]);
                }
            }
            break;

        case 'members-pending':
            foreach ($submissions as $sid => $submission) {
                if ($submission->uid == 0 or user_load($submission->uid) == NULL) {
                    unset($submissions[$sid]);
                }
                if ($submission->data[EVENT_CONFIRMED_FIELD_ID][0] == "confirmed") {
                    unset($submissions[$sid]);
                }
            }
            break;

        case 'non-members-pending':
            foreach ($submissions as $sid => $submission) {
                if ($submission->uid != 0  and user_load($submission->uid) != NULL) {
                    unset($submissions[$sid]);
                }
                if ($submission->data[EVENT_CONFIRMED_FIELD_ID][0] == "confirmed") {
                    unset($submissions[$sid]);
                }
            }
            break;

        case 'guests':
            foreach ($submissions as $sid => $submission) {
                if ($submission->data[EVENT_NUMBER_GUESTS_FIELD_ID][0] == "" || $submission->data[EVENT_NUMBER_GUESTS_FIELD_ID][0] == "0") {
                    unset($submissions[$sid]);
                }
            }
            break;

    }

}


function _guest_option_readable($option){

    switch($option) {

        case 'first_option':
            return "Monday evening Dinner Cruise only";
            break;

        case 'second_option':
            return "Sunday Brunch, evening Reception & Monday evening Dinner Cruise";
            break;

        default:
            return "Guest option not specified";

    }

}

function _render_event_report($nid)
{
    global $user;



    if (isset($_GET['results']) && is_numeric($_GET['results'])) {
        $pager_count = $_GET['results'];
    } else {
        //$pager_count = ?? //TODO: fix this :)
    }

    $node = node_load($nid);
    $submissions = webform_get_submissions($nid);


    if (isset($_GET['filter'])) {//TODO: validate filter

        _do_filter_report($_GET['filter'], $submissions);
    }

    // $count = webform_get_submission_count($nid);


    //    $header = theme('webform_results_submissions_header', array('node' => $node));



    if(SITE_NAME == 'AASA'){

        $header = array(
            array('data' => 'Name'),
            array('data' => 'Organization'),
            array('data' => 'Address'),
            array('data' => 'City'),
            array('data' => 'Guest Package'),
            array('data' => 'Email'),
            array('data' => 'Operations', 'colspan' => '3'),
        );

    }else{

        $header = array(
            array('data' => 'Name'),
            array('data' => 'Organization'),
            array('data' => 'Address'),
            array('data' => 'City'),
            array('data' => 'Email'),
            array('data' => 'Operations', 'colspan' => '3'),
        );
    }


    foreach ($submissions as $sid => $submission) {

        $name = empty($submission->data[1][0]) && empty($submission->data[2][0]) ? "--" : $submission->data[1][0] . " " . $submission->data[2][0] . "&nbsp;&nbsp;&nbsp;&nbsp;";
        $organization = !empty($submission->data[5][0]) && !empty($submission->data[5][0]) ? $submission->data[5][0] . "&nbsp;&nbsp;&nbsp;&nbsp;" : "--";
        $adrr = !empty($submission->data[6][0]) ? $submission->data[6][0] . "&nbsp;&nbsp;&nbsp;&nbsp;" : "--";
        $city = !empty($submission->data[9][0]) ? $submission->data[9][0] . "&nbsp;&nbsp;&nbsp;&nbsp;" : "--";


        if(SITE_NAME == 'AASA') {
            $_guest_option = !empty($submission->data[29][0]) ? _guest_option_readable($submission->data[29][0]) : "Guest option not specified";
            $guest_package = !empty($submission->data[16][0]) ? $submission->data[16][0] . " guest(s) for " . $_guest_option : "--";
        }    

        //procesCity($city);
         $_guest_option = !empty($submission->data[29][0]) ? _guest_option_readable($submission->data[29][0]) : "Guest option not specified";
        $guest_package = !empty($submission->data[16][0]) ? $submission->data[16][0]. " guest(s) for " . $_guest_option  : "--";

        $email = !empty($submission->data[12][0]) ? $submission->data[12][0] . "&nbsp;&nbsp;&nbsp;&nbsp;" : "--";
        $row = array($name, $organization, $adrr, $city, $guest_package, $email);

        $row[] = l(t('View '), "node/$node->nid/submission/$sid");
        //$operation_count = 1;
        // No need to call this multiple times, just reference this in a variable.
        $destination = drupal_get_destination();
        if (webform_submission_access($node, $submission, 'edit', $user)) {
            $row[] = l(t('Edit '), "node/$node->nid/submission/$sid/edit", array('query' => $destination));
            //$operation_count++;
        }
        //        if (webform_submission_access($node, $submission, 'delete', $user)) {
        //            $row[] = l(t('Delete'), "node/$node->nid/submission/$sid/delete", array('query' => $destination));
        //            $operation_count++;
        //        }
//            if ($operation_count < $operation_total) {
//                $row[count($row) - 1] = array('data' => $row[count($row) - 1], 'colspan' => $operation_total - $operation_count + 1);
//            }

        $rows[] = $row;


    }
    //dsm($rows);
    drupal_set_title(t($node->title . " Report"));
    webform_disable_page_cache();
    webform_set_breadcrumb($node);

    $element = array();
    $element['#theme'] = 'webform_results_submissions';
    $element['#node'] = $node;
    $element['#submissions'] = $submissions;
    //$element['#total_count'] = count($rows);
    //$element['#pager_count'] = 10;
    $element['#attached']['library'][] = array('webform', 'admin');

    $element['table']['#theme'] = 'table';
    $element['table']['#header'] = $header;
    //dsm(count($rows));
    $element['table']['#rows'] = $rows;
//    $element['table']['#operation_total'] = $operation_total;

    $all = isset($_GET['filter']) ? "<a href='/admin/event/" . $nid . "/report'>All participants</a>" : "All participants";

    if (isset($_GET['filter'])) {
        $filter = $_GET['filter'];
    } else {
        $filter = "";
    }

    $members = $filter != 'members' ? "<a href='?filter=members'>Members Registered</a>" : "Members Registered";
    $non_members = $filter != 'non-members' ? "<a href='?filter=non-members'>Non-Members Registered</a>" : "Non-Members Registered";
    $members_pending = $filter != 'members-pending' ? "<a href='?filter=members-pending'>Members with payment pending</a>" : "Members with payment pending";
    $non_members_pending = $filter != 'non-members-pending' ? "<a href='?filter=non-members-pending'>Non-Members with payment pending</a>" : "Non-Members with payment pending";
    $guests = $filter != 'guests' ? "<a href='?filter=guests'>Participants bringing guests</a>" : "Participants bringing guests";

    $filters = "Showing: $all | $members | $non_members | $members_pending | $non_members_pending | $guests";

    if (isset($_GET['filter']) || true) {
        $csv_filter = "filter=" . $_GET['filter'];
    } else {
        $csv_filter = "";
    }

    $csv = " -- <a href='/admin/event/$nid/csv?$csv_filter'>DOWNLOAD AS CSV</a>";


    return $filters . $csv . drupal_render($element);
}


